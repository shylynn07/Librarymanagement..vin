#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;
// Vincent's code
class BOOK {
public:
    void list();
    string booktitle(int);

protected:
    void add_new_book(int, string, string, float, int, string);
    void update_books(int, int, int);
    int available(int);
    void delete_record(int);

private:
    int ISBN, books;
    string title, author;
};

class operate_books : public BOOK {
public:
    void add_new_book() {
        int ISBN, year;
        string title, author, status;
        float price;

        // Adding books to catalogue
        cout << "ADD BOOKS TO CATALOGUE\n\n";

        cout << "ISBN: ";
        cin >> ISBN;
        cin.ignore();  // Ignore newline character left by `cin`

        cout << "Title of the book: ";
        getline(cin, title);

        cout << "Author of the Book: ";
        getline(cin, author);

        cout << "Price: ";
        cin >> price;

        cout << "Year of Publication: ";
        cin >> year;
        cin.ignore();  // Ignore newline after int input

        cout << "Status of the Book (Available/Not Available): ";
        getline(cin, status);

        cout << "\nBook added successfully!\n";

        // Saving to file
        add_to_catalogue(ISBN, title, author, price, year, status);
    }

    int add_to_catalogue(int ISBN, string title, string author, float price, int year, string status) {
        ofstream file("data.txt", ios::app);  // Open file in append mode

        if (!file) {
            cout << "Error opening file!\n";
            return 0;
        }

        file << ISBN << ", " << title << ", " << author << ", " << price << ", " << year << ", " << status << endl;
        file.close();

       return 0;
    }

    void view_books() {
        ifstream file("data.txt");
        string line;
        if (!file) {
            cout << "Error: Could not open file!" << endl;
            return;
        }
        while (getline(file, line)) {
            cout << line << endl;
        }
        file.close();
    }
void update_books(int, int, int){
    int add_to_catalogue(int ISBN, string title, string author, float price, int year, string status);
    cout << "Book catalogue updated successfully!\n";
}
void delete_record(){
string line, title;
cout<<"Please enter the title or ISBN of the book you want to delete"<<endl;
cin>>title;
ifstream file;
file.open("data.txt");
while (getline(file, line)){
    if (line !=title)
    cout<<line<<endl;
}
cout<<"The book with the name "<<title<<" has been if it existed"<<endl;
file.close();
remove("data.txt");
}
};


// Gody and barrack's Code

class Member {
    public:
        string name, email, contact;
        int id, age;
    
        // Function to take input for a new member
        void inputMember() {
            cout << "Enter Member ID: ";
            cin >> id;
            cin.ignore();
            cout << "Enter Name: ";
            getline(cin, name);
            cout << "Enter Email: ";
            getline(cin, email);
            cout << "Enter Age: ";
            cin >> age;
            cin.ignore();
            cout << "Enter Contact: ";
            getline(cin, contact);
        }
    
        // Function to display member details
        void displayMember() {
            cout << "ID: " << id << ", Name: " << name << ", Email: " << email
                 << ", Age: " << age << ", Contact: " << contact << endl;
        }
    };
    
    // LibraryManagement class to handle member operations
    class LibraryManagement {
    private:
        vector<Member> members;
        const string filename = "members.txt";
    
    public:
        // Function to add a new member
        void addMember() {
            Member m;
            m.inputMember();
            members.push_back(m);
            saveToFile();
            cout << "Member added successfully!\n";
        }
    
        // Function to view all members
        void viewMembers() {
            loadFromFile();
            if (members.empty()) {
                cout << "No members found.\n";
            } else {
                for (auto &m : members) {
                    m.displayMember();
                }
            }
        }
    
        // Function to update an existing member
        void updateMember(int id) {
            loadFromFile();
            for (auto &m : members) {
                if (m.id == id) {
                    cout << "Updating details for Member ID " << id << ":\n";
                    m.inputMember();
                    saveToFile();
                    cout << "Member updated successfully!\n";
                    return;
                }
            }
            cout << "Member not found!\n";
        }
    
        // Function to delete a member
        void deleteMember(int id) {
            loadFromFile();
            for (auto it = members.begin(); it != members.end(); ++it) {
                if (it->id == id) {
                    members.erase(it);
                    saveToFile();
                    cout << "Member deleted successfully!\n";
                    return;
                }
            }
            cout << "Member not found!\n";
        }
    
    private:
        // Function to save members to file
        void saveToFile() {
            ofstream file(filename, ios::trunc);
            for (auto &m : members) {
                file << m.id << "," << m.name << "," << m.email << "," << m.age << "," << m.contact << "\n";
            }
            file.close();
        }
    
        // Function to load members from file
        void loadFromFile() {
            members.clear();
            ifstream file(filename);
            Member m;
            while (file >> m.id) {
                file.ignore();
                getline(file, m.name, ',');
                getline(file, m.email, ',');
                file >> m.age;
                file.ignore();
                getline(file, m.contact);
                members.push_back(m);
            }
            file.close();
        }
    };

// Adrian and Shylynn's code
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <map>
using namespace std;

// Book Class
class Book {
private:
    string title;
    string author;
    string isbn;
    int year;
    int quantity;  // Quantity of available copies
    string status; // Available or Borrowed

public:
    Book(string t, string a, string i, int y, int q)
        : title(t), author(a), isbn(i), year(y), quantity(q), status("Available") {}

    string getTitle() const { return title; }
    string getIsbn() const { return isbn; }
    int getQuantity() const { return quantity; }
    void setQuantity(int q) { quantity = q; }
    string getStatus() const { return status; }
    void setStatus(const string& newStatus) { status = newStatus; }

    void displayDetails() const {
        cout << "Book: " << title << " by " << author << " | ISBN: " << isbn
                  << " | Year: " << year << " | Quantity: " << quantity << " | Status: " << status << endl;
    }

    void saveToFile(ofstream& file) const {
        file << title << "," << author << "," << isbn << "," << year << "," << quantity << "," << status << "\n";
    }

    static Book* loadFromFile(const string& line) {
        istringstream ss(line);
       string title, author, isbn, status;
        int year, quantity;

        getline(ss, title, ',');
        getline(ss, author, ',');
        getline(ss, isbn, ',');
        ss >> year;
        ss.ignore(1, ',');
        ss >> quantity;
        ss.ignore(1, ',');
        std::getline(ss, status);

        return new Book(title, author, isbn, year, quantity);
    }
};

// FileHandler Class
class FileHandler {
public:
    static void saveBookToFile(const Book& book) {
      ofstream outFile("books.txt", std::ios::app);  // Open file in append mode
        if (outFile.is_open()) {
            book.saveToFile(outFile);
            outFile.close();
           cout << "Book saved to file successfully!" << endl;
        } else {
            cerr << "Error: Could not open file for saving." << endl;
        }
    }

    static void loadBooks(std::map<std::string, Book*>& books) {
        std::ifstream inFile("books.txt");
        std::string line;
        while (std::getline(inFile, line)) {
            Book* book = Book::loadFromFile(line);
            books[book->getIsbn()] = book;  // Use ISBN as the key to map to the book
        }
        inFile.close();
    }

    static void saveAllBooksToFile(const std::map<std::string, Book*>& books) {
        std::ofstream outFile("books.txt", std::ios::trunc);  // Reopen in truncate mode to overwrite file
        if (outFile.is_open()) {
            for (const auto& pair : books) {
                pair.second->saveToFile(outFile);
            }
            outFile.close();
        } else {
            std::cerr << "Error: Could not open file for saving." << std::endl;
        }
    }
};

// Member Class
class Member {
private:
    std::string name;
    std::string memberId;
    double balance;  // Member's balance for charges

public:
    Member(std::string n, std::string id) : name(n), memberId(id), balance(0.0) {}

    std::string getMemberId() const { return memberId; }
    double getBalance() const { return balance; }
    void addCharge(double charge) { balance += charge; }

    void displayDetails() const {
        std::cout << "Member: " << name << " | ID: " << memberId << " | Balance: " << balance << std::endl;
    }
};

// Librarian Class
class Librarian {
public:
    void addBook();
    void deleteBook();
};

void Librarian::addBook() {
    std::string title, author, isbn;
    int year, quantity;
    std::cout << "Enter book title: ";
    std::cin.ignore();
    std::getline(std::cin, title);
    std::cout << "Enter book author: ";
    std::getline(std::cin, author);
    std::cout << "Enter ISBN: ";
    std::getline(std::cin, isbn);
    std::cout << "Enter publication year: ";
    std::cin >> year;
    std::cout << "Enter quantity of books: ";
    std::cin >> quantity;

    Book newBook(title, author, isbn, year, quantity);
    FileHandler::saveBookToFile(newBook);
}

void Librarian::deleteBook() {
    std::string isbnToDelete;
    std::cout << "Enter the ISBN of the book to delete: ";
    std::cin.ignore();
    std::getline(std::cin, isbnToDelete);

    std::map<std::string, Book*> books;
    FileHandler::loadBooks(books);

    if (books.find(isbnToDelete) != books.end()) {
        delete books[isbnToDelete];
        books.erase(isbnToDelete);
        FileHandler::saveAllBooksToFile(books);
        std::cout << "Book deleted successfully!" << std::endl;
    } else {
        std::cout << "No book found with ISBN " << isbnToDelete << std::endl;
    }
}

// Welcome Menu
void displayWelcomeMenu() {
    std::cout << "\n===== Welcome to the Library System =====" << std::endl;
    std::cout << "1. Login as Librarian" << std::endl;
    std::cout << "2. Login as Member" << std::endl;
    std::cout << "3. Register Membership" << std::endl;
    std::cout << "4. Search for books" << std::endl;
    std::cout << "5. Exit" << std::endl;
    std::cout << "Enter your choice: ";
}

// Main Menu
void displayMenu(bool isLibrarian) {
    std::cout << "\n===== Library Menu =====" << std::endl;
    if (isLibrarian) {
        std::cout << "1. View all books" << std::endl;
        std::cout << "2. Add a new book" << std::endl;
        std::cout << "3. Delete a book" << std::endl;
        std::cout << "4. Exit" << std::endl;
    } else {
        std::cout << "1. View all books" << std::endl;
        std::cout << "2. Borrow a book" << std::endl;
        std::cout << "3. Return a book" << std::endl;
        std::cout << "4. Exit" << std::endl;
    }
    std::cout << "Enter your choice: ";
}


    // Now proceed to the relevant menu for Librarian or Member after login
    int menuChoice;
    while (true) {
        displayMenu(isLibrarian);
        std::cin >> menuChoice;

        std::map<std::string, Book*> books;
        FileHandler::loadBooks(books);

        if (isLibrarian) {
            switch (menuChoice) {
                case 1: {
                    for (const auto& pair : books) {
                        pair.second->displayDetails();
                    }
                    break;
                }
                case 2: {
                    librarian.addBook();
                    break;
                }
                case 3: {
                    librarian.deleteBook();
                    break;
                }
                case 4: {
                    std::cout << "Exiting..." << std::endl;
                    return 0;
                }
                default:
                    std::cout << "Invalid option." << std::endl;
            }
        } else {
            switch (menuChoice) {
                case 1: {
                    for (const auto& pair : books) {
                        pair.second->displayDetails();
                    }
                    break;
                }
                case 2: {
                    // Borrow a book
                    std::string isbn;
                    std::cout << "Enter the ISBN of the book to borrow: ";
                    std::cin.ignore();
                    std::getline(std::cin, isbn);

                    if (books.find(isbn) != books.end() && books[isbn]->getQuantity() > 0) {
                        books[isbn]->setQuantity(books[isbn]->getQuantity() - 1);

                        if (books[isbn]->getQuantity() == 0) {
                            books[isbn]->setStatus("Unavailable");
                        }

                        FileHandler::saveAllBooksToFile(books);
                        std::cout << "Successfully borrowed the book!" << std::endl;
                    } else {
                        std::cout << "Book not available or doesn't exist." << std::endl;
                    }
                    break;
                }
                case 3: {
                    // Return a book
                    std::string isbn;
                    std::cout << "Enter the ISBN of the book to return: ";
                    std::cin.ignore();
                    std::getline(std::cin, isbn);

                    if (books.find(isbn) != books.end()) {
                        books[isbn]->setQuantity(books[isbn]->getQuantity() + 1);

                        if (books[isbn]->getQuantity() > 0) {
                            books[isbn]->setStatus("Available");
                        }

                        FileHandler::saveAllBooksToFile(books);
                        std::cout << "Successfully returned the book!" << std::endl;
                    } else {
                        std::cout << "Book not found." << std::endl;
                    }
                    break;
                }
                case 4: {
                    std::cout << "Exiting..." << std::endl;
                    return 0;
                }
                default:
                    std::cout << "Invalid option." << std::endl;
            }
        }
    }

    return 0;
}


int main() {
operate_books obj;

    obj.add_new_book();  // Call the function without passing uninitialized variables
    obj.view_books(); //call the fuction view books
    obj.delete_record(); //call the delete record function 

    // Continuation of Gody's and Barrack's code
    LibraryManagement lm;
    int choice, id;
    do {
        cout << "\nLibrary Member Management System\n";
        cout << "1. Add Member\n2. View Members\n3. Update Member\n4. Delete Member\n5. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                lm.addMember();
                break;
            case 2:
                lm.viewMembers();
                break;
            case 3:
                cout << "Enter Member ID to update: ";
                cin >> id;
                lm.updateMember(id);
                break;
            case 4:
                cout << "Enter Member ID to delete: ";
                cin >> id;
                lm.deleteMember(id);
                break;
            case 5:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice! Try again.\n";
        }
    } while (choice != 5);

    //Librarian
    int choice;
    bool isLibrarian = false;  // Assume user is not librarian for this example, change as needed
    bool loggedIn = false;

    Librarian librarian;

    while (!loggedIn) {
        displayWelcomeMenu();
        std::cin >> choice;

        switch (choice) {
            case 1: {
                // Login as Librarian
                std::cout << "Logged in as Librarian." << std::endl;
                isLibrarian = true;
                loggedIn = true;
                break;
            }
            case 2: {
                // Login as Member
                std::cout << "Logged in as Member." << std::endl;
                isLibrarian = false;
                loggedIn = true;
                break;
            }
            case 3: {
                // Register Membership (Simple demonstration)
                std::string name, memberId;
                std::cout << "Enter your name: ";
                std::cin.ignore();
                std::getline(std::cin, name);
                std::cout << "Enter your member ID: ";
                std::getline(std::cin, memberId);
                Member newMember(name, memberId);
                std::cout << "Membership registered successfully!" << std::endl;
                break;
            }
            case 4: {
                // Search for books
                std::map<std::string, Book*> books;
                FileHandler::loadBooks(books);
                std::string search;
                std::cout << "Enter book title or ISBN to search: ";
                std::cin.ignore();
                std::getline(std::cin, search);

                bool found = false;
                for (const auto& pair : books) {
                    if (pair.second->getTitle().find(search) != std::string::npos ||
                        pair.second->getIsbn().find(search) != std::string::npos) {
                        pair.second->displayDetails();
                        found = true;
                    }
                }

                if (!found) {
                    std::cout << "No books found with the search term: " << search << std::endl;
                }
                break;
            }
            case 5: {
                std::cout << "Exiting..." << std::endl;
                return 0;
            }
            default:
                std::cout << "Invalid option. Try again." << std::endl;
        }
    

}
